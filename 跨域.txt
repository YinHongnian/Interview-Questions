跨域
	浏览器的同源政策: 协议+域名+端口三者一致方为同源
	同源政策限制以下行为:
		(1)Cookie、LocalStorage和IndexDB无法读取
		(2)DOM 和JS对象无法获得
		(3)Ajax请求不能发送
解决跨域的方式:
	1.通过jsonp跨域  --> 只能实现get一种请求
		1)原生:
			<script>
				var script = document.createElement('script')
				script.type = 'text/javascript'
				script.src = 'http://www.domain2.com:8080/login?user=admin&callback=onBack'
				document.head.appendChild(script)
				
				function onBack(res){
					alert(JSON.stringify(res))
				}
			</script>
			服务器端返回: onBack({"status": true, "user": "admin"})
		2)jquery:
			$.ajax({
				url:'http://www.domain2.com:8080/login',
				type: 'get',
				dataType: 'jsonp',
				jsonpCallback: 'onBack',
				data: {}
			})
		3)vue.js:
			this.$http.jsonp('http://www.domain2.com:8080/login',{
				params: {},
				jsonp: 'onBack'
			}).then((res) => {
				console.log(res)
			})
		4)nodejs:
			var querystring = require('querystring')
			var http = require('http')
			var server = http.createServer();
			server.on('request', function(req,res){
				var params = qs.parse(req.url.split('?')[1])
				var fn = params.callback
				res.writeHead(200, {'Content-Type': 'text/javascript'})
				res.write(fn + '(' + JSON.stringify(params) + ')')
				res.end()
			})
			server.listen('8080')
			console.log('Server is running at port 8080...')
	----------------------------------------------------------------------------------------------------
			
	2.document.domain + iframe跨域  --> 仅限于主域相同, 子域不同的跨域请求
		两个页面强制设置document.domain
		父窗口: (http://www.domain.com/a.html)
			<iframe id="iframe" src="http://child.domain.com/b.html"></iframe>
			<script>
				document.domain = 'domain.com'
				var user = 'admin'
			</script>
		子窗口:
			<script>
				document.domain = 'domain.com'
				alert('get js data from parent:' + window.parent.user)
			</script>
			
	-----------------------------------------------------------------------------------------------------
	
	3.location.hash + iframe --> a与b不同域, 通过hash值单向通信;
								 b与a通信则需要通过c, b与c通过hash单向通信, c通过parent.parent访问a页面所有对象
		a.html:(http://www.domain1.com/a.html)
			// a将'#user=admin'作为hash值传递给b
			<iframe id="iframe" src="http://www.domain2.com/b.html" style="display:none;"></iframe>
			<script>
				var iframe = document.getElementById('iframe')
				setTimeout(function(){
					iframe.src = iframe.src + '#user=admin'
				}, 1000)
				function onCallback(res){
					alert('data from c.html:' + res)
				}
			</script>
		b.html:(http://www.domain2.com/b.html)
			// b将'#user=admin'作为hash值传递给c
			<iframe id="iframe" src="http://www.domain1.com/c.html" style="display:none"></iframe>
			<script>
				var iframe = document.getElementById('iframe')
				window.onhashchange = function(){
					iframe.src = iframe.src + location.hash
				}
			</script>
		c.html:(http://www.domain1.com/c.html)
			// c接收到hash值后,通过parent.parent调用a的方法
			window.onhashchange = function(){
				window.parent.parent.onCallback('hello:' + location.hash.replace('#user=',''))
			}
			
	----------------------------------------------------------------------------------------------------
	4.window.name + iframe --> name值在不同的页面(甚至不同域名)加载后依旧存在, 并且可以支持(2MB)的name值
		a.html:(http://www.domain1.com/a.html)
			var proxy = function(url, callback){
				var state = 0
				var iframe = document.createElement('iframe')
				// 加载跨域页面
				iframe.src = url
				// onload事件会触发2次，第1次加载跨域页，并留存数据于window.name
				iframe.onload = function(){			// onload事件会在页面或者图像加载完成时立即执行
					if(state === 1){
						// 第2次onload(同域proxy页)成功后，读取同域window.name中数据
						callback(iframe.contentWindow.name)
						destoryFrame()
					}else{
						// 第1次onload(跨域页)成功后，切换到同域代理页面
						iframe.contentWindow.location = 'http://www.domain1.com/proxy.html'
						state = 1
					}
				}
				document.body.appendChild(iframe)
				
				//获取数据后销毁这个iframe, 释放内容; 这也保证了安全
				function destoryFrame(){
					iframe.contentWindow.document.write('')
					iframe.contentWindow.close()
					document.body.removeChild(iframe)
				}
			}
			// 请求跨域b页面数据
			proxy('http://www.domain2.com/b.html', function(data){
				alert(data)
			})
		proxy.html:(http://www.domain1.com/proxy.html)
			中间代理页, 与a.html同域, 内容为空即可
		b.html:(http://www.domain2.com/b.html)
			<script>
				window.name = 'This is domain2 data'
			</script>
		
	----------------------------------------------------------------------------------------------------
	
	5.postMessage跨域
		可以解决以下问题:
			a.页面和其打开的新窗口的数据传递
			b.多窗口之间消息传递
			c.页面与嵌套的iframe消息传递
			d.上面三个场景的跨域数据传递
		用法:
			postMessage(data, origin)接受两个参数
			data: html5规范支持任意基本类型或可复制的对象, 但部分浏览器只支持字符串, 所以传参时最好用JSON.stringify()序列化
			origin: 协议+主机+端口, 也可以设置为"*", 表示可以传递给任意窗口. 如果要指定和当前窗口同源的话设置为"/"
		例子:
			a.html:(http://www.domain1.com/a.html)
				<iframe id="iframe" src="http://www.domain2.com/b.html" style="display:none"></iframe>
				<script>
					var iframe = document.getElementById('iframe')
					iframe.onload = function(){
						var data = {
							name: 'aym'
						}
						iframe.contentWindow.postMessage(JSON.stringify(data),'http://www.domain2.com')
					}
					window.addEventListener('message', function(e){
						alert('data from domain2: ' + e.data)
					}, false)
				</script>
			b.html:(http://www.domain2.com/b.html)
				<script>
					// 接受domain1的数据
					window.addEventListener('message', function(e){
						alert('data from domain1: ' + e.data)
						
						var data = JSON.parse(e.data)
						if(data) {
							data.number = 16
							// 处理后再发回domain1
							window.parent.postMessage(JSON.stringify(data), 'http://www.domain1.com')
						}
					}, false)
				</script>
	----------------------------------------------------------------------------------------------------
	
	6.跨域资源共享(CORS) --> 主流跨域解决方案
		普通跨域请求: 只服务端设置Access-Control-Allow-Origin即可, 前端无须设置
		带cookie请求: 前后端都需要设置
		注意: 读取的cookie为跨域请求接口所在域的cookie, 而非当前页
		1. 前端设置:
			原生ajax:
				var xhr = new XMLHttpRequest()  // IE8/9需用window.XDomainRequest兼容
				// 前端设置是否带cookie
				xhr.withCredentials = true
				xhr.open('post', 'http://www.domain2.com:8080/login', true)
				xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')
				xhr.send('user=admin')
				xhr.onreadystatechange = function(){
					if(xhr.readyState == 4 && xhr.status == 200) {
						alert(xhr.responseText)
					}
				}
			jQuery ajax:
				$.ajax({
					...
					xhrFields: {
						withCredentials: true // 前端设置是否带cookie
					},
					crossDomain: true // 会让请求头中包含跨域的额外信息, 但不会含cookie
				})
			vue:
				在vue-resource封装的ajax组件中加入以下代码
				Vue.http.options.credentials = true
		2. 服务端设置:
			Nodejs后台:
				var http = require('http')
				var server = http.createServer()
				var qs = require('querystring')
				server.on('request', function(req, res){
					var postData = ''
					
					// 数据块接收中
					req.addListener('data', function(chunk){
						postData += chunk
					})
					
					// 数据接收完毕
					req.addListener('end', function(){
						postData = qs.parse(postData)
						res.writeHead(200, {
							'Access-Control-Allow-Credentials': 'true',		// 后端允许发送cookie
							'Access-Control-Allow-Origin': 'http://www.domain1.com'		// 允许访问的域(协议+域名+端口)
							'Set-Cookie': 'l=a123456;path=/;Domain=www.domain2.com;HttpOnly'	//HttpOnly:脚本无法读取cookie
						})
						res.write(JSON.stringify(postData))
						res.end()
					})
				})
				server.listen('8080')
	----------------------------------------------------------------------------------------------------
	
	7.nginx代理跨域
		nginx配置解决iconfont跨域
			浏览器跨域访问js css img等常规静态资源被同源策略许可, 但iconfont字体文件(eot | otf | woff | svg)例外,
			此时可在nginx的静态资源服务器中加入以下配置
			location / {
				add_header Access-Control-Allow-Origin *;
			}
		nginx反向代理接口跨域
			实现思路: 通过nginx配置一个代理服务器(域名与domain1相同, 端口不同)做跳板, 反向代理访问domain2接口,并且
						可以顺便修改cookie中domain信息, 方便当前域cookie写入, 实现跨域登录
			nginx具体配置:
				#proxy服务器
					server{
						listen	81;
						server_name		www.domain1.com;
						location / {
							proxy_pass	http://www.domain2.com:8080;	#反向代理
							proxy_cookie_domain	www.domain2.com	www.domain1.com;	#修改cookie里域名
							index index.html index.html;
							
							# 当用webpack-dev-server等中间件代理接口访问nginx时, 此时无浏览器参与, 故没有同源限制, 下面的跨域配置可不启用
							add_header Access-Control-Allow-Origin http://www.domain1.com
							add_header Access-Control-Allow-Credentials true;
						}
					}
				前端代码示例:
					var xhr = new XMLHttpRequest()
					
					//前端开关: 浏览器是否读写cookie
					xhr.withCredentials = true
					
					// 访问nginx中的代理服务器
					xhr.open('get', 'http://www.domain1.com:81/?user=admin', true)
					xhr.send()
				Nodejs后台示例:
					var http = require('http')
					var server = http.createServer()
					var qs = require('querystring')
					server.on('request', function(req, res){
						var params = qs.parse(req.url.substring(2))
						
						//向前台写cookie
						res.writeHead(200,{
							'Set-Cookie': 'l=a123456;path=/;Domain=www.domain2.com;HttpOnly'	//HttpOnly:脚本无法读取cookie
						})
						
						res.write(JSON.stringify(postData))
						res.end()
					})
					server.listen('8080')
	----------------------------------------------------------------------------------------------------
	8.Nodejs中间件代理跨域
		(1)非vue框架的跨域(2次跨域): 利用node + express + http-proxy-middleware搭建一个proxy服务器
			前端:
				var xhr = new XMLHttpRequest()
				xhr.withCredentials = true
				xhr.open('get', 'http://www.domain1.com:3000/login?user=admin', true)
				xhr.send()
			中间件服务器:
				var express = require('express')
				var proxy = require('http-proxy-middleware')
				var app = express()
				
				app.use('/', proxy({
					// 代理跨域目标接口
					target: 'http://www.domain2.com:8080',
					changeOrigin: true,
					
					// 修改响应头信息, 实现跨域并允许带cookie
					onProxyRes: function(proxyRes, req, res){
						res.header('Access-Control-Allow-Credentials', 'true')
						res.header('Access-Control-Allow-Origin', 'http://www.domain1.com')
					}
					
					// 修改响应信息中cookie域名
					cookieDomainRewrite: 'www.domain1.com' //可以为false, 表示不修改
				}))
				app.listen(3000)
			Nodejs后台
				var http = require('http')
				var server = http.createServer()
				var qs = require('querystring')
				server.on('request', function(req, res){
					var params = qs.parse(req.url.substring(2))
					
					//向前台写cookie
					res.writeHead(200,{
						'Set-Cookie': 'l=a123456;path=/;Domain=www.domain2.com;HttpOnly'	//HttpOnly:脚本无法读取cookie
					})
					
					res.write(JSON.stringify(postData))
					res.end()
				})
				server.listen('8080')
		(2)vue框架的跨域(1次跨域)
			node + webpack + webpack-dev-server代理接口跨域。在开发环境下，
			由于vue渲染服务和接口代理服务都是webpack-dev-server同一个，所以页面与代理接口之间不再跨域，无须设置headers跨域信息了。
			webpack.config.js部分配置：
				module.exports = {
					entry: {},
					module: {},
					...
					devServer: {
						historyApiFallback: true,
						proxy: [{
							context: '/login',
							target: 'http://www.domain2.com:8080', //代理跨域目标接口
							changeOrigin: true,
							secure: false // 当代理某些https服务报错时用
							cookieDomainRewrite: 'www.domain1.com'  // 可以为false, 表示不修改
						}],
						noInfo: true
					}
				}
			
	----------------------------------------------------------------------------------------------------
	9.webSocket协议跨域
		WebSocket protocol是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是server push技术的一种很好的实现。
		原生WebSocket API使用起来不太方便，我们使用Socket.io，它很好地封装了webSocket接口，提供了更简单、灵活的接口，也对不支持webSocket的浏览器提供了向下兼容。
		前端:
			<div>use input: <input type="text"></div>
			<script src="./socket.io.js"></script>
			<script>
				var socket = io('http://www.domain2.com:8080')
				
				// 连接成功处理
				socket.on('content', function(){
					// 监听服务端消息
					socket.on('message', function(mag){
						console.log('data from server:' + msg)
					})
					
					//监听服务端关闭
					socket.on('disconnect', function(){
						console.log('Server socket has closed.')
					})
				})
				document.getElementsByTagName('input')[0].onblur = function(){
					socket.send(this.value)
				}
			</script>
		Nodejs socket后台:
			var http = require('http');
			var socket = require('socket.io');

			// 启http服务
			var server = http.createServer(function(req, res) {
				res.writeHead(200, {
					'Content-type': 'text/html'
				});
				res.end();
			});

			server.listen('8080');
			console.log('Server is running at port 8080...');

			// 监听socket连接
			socket.listen(server).on('connection', function(client) {
				// 接收信息
				client.on('message', function(msg) {
					client.send('hello：' + msg);
					console.log('data from client: ---> ' + msg);
				});

				// 断开处理
				client.on('disconnect', function() {
					console.log('Client socket has closed.'); 
				});
			});
