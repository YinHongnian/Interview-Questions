1. 封装
    <script>
      function person(name,age){
        this.name=name;
        this.age=age;
      }      
      person.prototype.showName=function(){
        alert(this.name);
      }
      person.prototype.showAge=function(){
        alert(this.age);
      }

      var obj1= new person('sun',22);
      var obj2= new person('leo',21);

      obj1.showName();  //sun
      obj1.showAge();    //22
      obj2.showName();  //leo
      obj2.showAge();    //21

    //属性私有后，改变各自的属性不会影响别的对象。同时，方法也是由各个对象共享的。在语义上，这符合了面向对象编程的要求。
    </script>

2. 继承
     <script>        
      function person(name, sex){
        this.name=name;
        this.sex=sex;
      }
      person.prototype.showName=function(){
        alert(this.name);
      }
      person.prototype.showSex=function(){
        alert(this.sex);
      }
   ////////////////////////////////////////////////////

      function worker(name,sex,job){
        person.call(this,name,sex);//构造函数伪装   调用父级的构造函数--为了继承属性
        this.job=job;
      }

     //原型链  通过原型来继承父级的方法
      for(attr in person.prototype){
        worker.prototype[attr]=person.prototype[attr];
      }
      worker.prototype.showJob=function(){
        alert(this.job);
      }

      var op=new person('blue','男');  
      var ow=new worker('blue','男','程序员');

      op.showName();  //blue
      op.showSex();  //男
      ow.showName();  //blue
      ow.showsex();  //男
      ow.showjob();  //程序员

    //继承的好处：父类新加的功能，子类也具备该功能，子类新加的功能不会影响父类的功能
   </script>

3. 多态
    多态背后的思想是将”做什么“和”谁去做以及怎样去做分开“。
      var makeSound = function(animal) {
        animal.sound();
      }

      var Duck = function(){}
      Duck.prototype.sound = function() {
          console.log('嘎嘎嘎')
      }
      var Chiken = function() {};
      Chiken.prototype.sound = function() {
          console.log('咯咯咯')
      }

      makeSound(new Chicken());
      makeSound(new Duck());