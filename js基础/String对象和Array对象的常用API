创建一个String 对象，语法：new String(stringValue),这个调用会将参数转换为字符串，并作为一个String 对象。事实上任何一个字符串常量都是一个Ｓtring对象，可以将其直接作为对象来使用，
这和使用new String()创建对象的区别是：typeof的返回值不同，一个是“stirng",另一个是"object".
String对象常用API:
  1. strObj.charCodeAt(index)
      代表指定位置字符的Unicode编码.如果指定位置没有字符，将返回NaN。
  2. String.fromCharCode([code1[,code2...]])
      将Unicode转为字符串。如果没有参数，结果为空字符串。
  3. strObj.charAt(index) 
      返回指定索引位置处的字符。如果超出有效范围的索引值返回空字符串。
  4. strObj.slice(start[,end]) 
      返回一个新的数组, 该方法并不会修改原数组
  5. strObj.substring(start,end) 
      substring方法使用start和end两者中的较小值作为子字符串的起始点。如果start或end为NaN或者为负数，那么将其替换为0
      含头不含尾, 与 slice() 和 substr() 方法不同的是，substring() 不接受负的参数
  6. strObj.substr(start[,length]) 
  7. strObj.indexOf(substr[,startIndex])
      String对象内第一次出现子字符串位置。如果没有找到子字符串，则返回-1
  8. strObj.lastIndexOf(substr[,startindex]) 
      String对象中字符串最后出现的位置。如果没有匹配到子字符串，则返回-1
  9. strObj.search(reExp)
      返回与正则表达式查找内容匹配的第一个字符串的位置
  10. strObj.replace(searchValue,replaceValue)
      该方法将字符串中第一个出现的searchValue子字符串替换为replaceValue，并返回新的字符串。原有的字符串不受影响。
  11. strObj.match(reExp)
      从字符串中搜索出匹配regExp正则表达式的所有子字符串，将他们作为一个数组返回
  12. str.concat([string1[,string2...]]) 
      字符串拼接, 该方法不会改变现有的字符串，而仅仅会返回被连接字符串的一个副本
  13. strObj.split([separator[,limit]])
      将一个字符串分割为子字符串，然后将结果作为字符串数组返回
  14. str.toLowerCase()
  15. str.toUpperCase()


Array对象
  1.  concat()
  2.  join()
      把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。
  3.  pop()
      删除并返回数组的最后一个元素
  4.  push()
      向数组的末尾添加一个或更多元素，并返回新的长度。
  5.  reverse()
      颠倒数组中元素的顺序。
  6.  shift()
      删除并返回数组的第一个元素
  7.  slice()
  8.  sort()
  9.  splice()
  10. toSource()
      返回该对象的源代码。
  11. toString()
      把数组转换为字符串，并返回结果。
  12. toLocalString()
      把数组转换为本地数组，并返回结果。
  13. unshift()
      向数组的开头添加一个或更多元素，并返回新的长度。
  14. valueOf()
      返回数组对象的原始值