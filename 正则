每个正则表达式都可带有一或多个标志（flags），用以标明正则表达式的行为，正则表达式支持下列 3 个标志：

g： 表示全局（global）模式，即模式将被应用于所有字符串，而非在发现第一个匹配项时立即停止；
i ： 表示不区分大小写（case-insensitive）模式，即在确定匹配项时忽略模式与字符串的大小写；
m：表示多行（multiline）模式，即在到达一行文本末尾时还会继续查找下一行中是否存在与模式匹配的项。
如果多个标志同时使用时，则写成：gmi 。

正则表达式的创建有两种方式： new RegExp(expression) 和 直接字面量。

//使用直接字面量创建
var exp1 = /(^\s+)|(\s+$)/g; 
 
//使用RegExp对象创建
var exp2 = new RegExp("(^\\s+)|(\\s+$)","g");

() 的作用是提取匹配的字符串。表达式中有几个()就会得到几个相应的匹配字符串。比如 (\s+) 表示连续空格的字符串。
[] 是定义匹配的字符范围。比如 [a-zA-Z0-9] 表示字符文本要匹配英文字符和数字。
{} 一般用来表示匹配的长度，比如 \d{3} 表示匹配三个数字，\d{1,3} 表示匹配1~3个数字，\d{3,} 表示匹配3个以上数字

^ 匹配一个字符串的开头，比如 (^a) 就是匹配以字母a开头的字符串
$ 匹配一个字符串的结尾,比如 (b$) 就是匹配以字母b结尾的字符串
^ 还有另个一个作用就是取反，比如[^xyz] 表示匹配的字符串不包含xyz
注意问题：
    如果 ^ 出现在[ ] 中一般表示取反，而出现在其他地方则是匹配字符串的开头。
    ^ 和 $ 配合可以有效匹配完整字符串: /d+/.test('4xpt') -> true，而 /^\d+$/.test('4xpt')->false

* 表示匹配前面元素0次或多次，比如 (\s*) 就是匹配0个或多个空格
+ 表示匹配前面元素1次或多次，比如 (\d+) 就是匹配由至少1个整数组成的字符串
? 表示匹配前面元素0次或1次，相当于{0,1} ，比如(\w?) 就是匹配最多由1个字母或数字组成的字符串 

\d 匹配一个非负整数， 等价于 [0-9]
\s 匹配一个空白字符
\w 匹配一个英文字母或数字，等价于[0-9a-zA-Z]
.   匹配除换行符以外的任意字符，等价于[^\n]

前面的大都是JS正则表达式的语法，而test则是用来检测字符串是否匹配某一个正则表达式，如果匹配就会返回true,反之则返回false
    /\d+/.test("123") ; //true
    /\d+/.test("abc") ; //false
match是获取正则匹配到的结果，以数组的形式返回
    "186a619b28".match(/\d+/g); // ["186","619","28"]
 
replace 本身是JavaScript字符串对象的一个方法，它允许接收两个参数：
    replace([RegExp|String],[String|Function])
第1个参数可以是一个普通的字符串或是一个正则表达式
第2个参数可以是一个普通的字符串或是一个回调函数

如果第1个参数是 RegExp，JS会先提取RegExp匹配出的结果，然后用第2个参数逐一替换匹配出的结果
如果第2个参数是回调函数，每匹配到一个结果就回调一次，每次回调都会传递以下参数：
    result: 本次匹配到的结果
    $1,...$9: 正则表达式中有几个()，就会传递几个参数，$1~$9分别代表本次匹配中每个()提取的结果，最多9个
    offset:记录本次匹配的开始位置
    source:接受匹配的原始字符串
