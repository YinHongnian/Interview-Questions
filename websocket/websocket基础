websocket应用场景: 聊天室

特点:
  1.服务器可以主动向客户端推送消息, 客户端也可以向服务器发送消息, 是真正的双向平等对话, 属于服务器推送技术的一种
  2.建立在TCP协议之上, 服务器端的实现比较容易
  3.与HTTP协议有着良好的兼容性, 默认端口也是80和443, 并且握手阶段采用HTTP协议, 因此握手时不容易屏蔽, 能通过各种HTTP代理服务器
  4.数据格式比较轻量, 性能开销小, 通信高效
  5.可以发送文本, 也可以发送二进制数据
  6.没有同源限制, 客户端可以与任意服务器通信
  7.协议标识是ws(如果加密, 则为wss), 服务器网址就是URL. 如:ws://example.com:80/some/path

客户端:
  var ws = new WebSocket("ws://echo.websocket.org")
  ws.onopen = function(evt){      //指定连接成功后的回调函数
    console.log("Connection open ... ");
    ws.send("Hello WebSockects!")
  }
  // 如果要指定多个回调函数, 可以使用addEventListener方法
  ws.addEventListener('open', function(event){
    ws.send('Hello Server')
  })

  ws.onmessage = function(evt){
    console.log("Received Message:" + evt.data)
    if(typeof evt.data === String) {
      console.log("Received data string");
    }

    if(evt.data instanceof ArrayBuffer){
      var buffer = evt.data;
      console.log("Received arraybuffer");
    }
    ws.close()
  }
  ws.addEventListener("message", function(event) {
    var data = event.data;
    // 处理数据
  })

  ws.onerror = function(event) {
    // handle error event
  };
  ws.addEventListener("error", function(event) {
    // handle error event
  });

  ws.onclose = function(evt){
    console.log("Connection closed")
    var code = event.code
    var reason = event.reason
    var wasClean = event.wasClean
  }
  ws.addEventListener("close", function(event) {
    var code = event.code;
    var reason = event.reason;
    var wasClean = event.wasClean;
    // handle close event
  })

客户端API:
  WebSocket.readyState属性返回实例对象的当前状态:
    CONNECTING: 值为0, 表示正在连接
    OPEN: 值为1, 表示连接成功, 可以通信了
    CLOSING: 值为2, 表示连接正在关闭
    CLOSED: 值为3, 表示连接已经关闭, 或者打开连接失败